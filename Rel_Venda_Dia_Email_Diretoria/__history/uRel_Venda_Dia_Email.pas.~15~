unit uRel_Venda_Dia_Email;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.Oracle,
  FireDAC.Phys.OracleDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  FireDAC.Comp.DataSet, ppDesignLayer, ppParameter, ppDB, ppDBPipe, ppModule,
  daDataModule, ppBands, ppClass, ppCtrls, ppStrtch, ppMemo, ppVar, ppPrnabl,
  ppCache, ppComm, ppRelatv, ppProd, ppReport, Vcl.StdCtrls, Vcl.Mask,
  Vcl.Buttons, ACBrBase, ACBrMail,System.DateUtils,System.IniFiles, Encryp,
  uCarregaSenha;

type
  TfrmRel_Venda_dia_Email = class(TForm)
    FDConnection1: TFDConnection;
    FDPhysOracleDriverLink1: TFDPhysOracleDriverLink;
    dtsRelVenda: TDataSource;
    qryRelVenda: TFDQuery;
    qryDta: TFDQuery;
    btnImprimir: TBitBtn;
    ACBrMail1: TACBrMail;
    pprVda_Venda_Temp: TppReport;
    prbCab: TppHeaderBand;
    ppShape1: TppShape;
    ppShape4: TppShape;
    ppLabel1: TppLabel;
    prlMes: TppLabel;
    prlEmissao: TppLabel;
    ppLabel7: TppLabel;
    ppSystemVariable1: TppSystemVariable;
    ppLabel2: TppLabel;
    ppColumnHeaderBand1: TppColumnHeaderBand;
    prbDetalhe: TppDetailBand;
    ppMemo1: TppMemo;
    ppDBText4: TppDBText;
    prlValor: TppDBText;
    prlPercentual: TppDBText;
    ppLine1: TppLine;
    ppLine2: TppLine;
    ppdVlrAcum: TppDBText;
    ppdPerAcum: TppDBText;
    ppDBText5: TppDBText;
    ppDBText6: TppDBText;
    ppdPerMeta: TppDBText;
    ppDBText1: TppDBText;
    ppLine3: TppLine;
    ppdDiaImpresso: TppDBText;
    ppdDtaMovimento: TppDBText;
    ppMargem: TppDBText;
    ppDBText3: TppDBText;
    ppColumnFooterBand1: TppColumnFooterBand;
    ppGroup2: TppGroup;
    ppGroupHeaderBand2: TppGroupHeaderBand;
    ppGroupFooterBand2: TppGroupFooterBand;
    ppGroup1: TppGroup;
    prbCabecalho: TppGroupHeaderBand;
    mmoCabecalho: TppMemo;
    ppShape2: TppShape;
    prlCodLoja: TppDBText;
    prlDescricaoLoja: TppDBText;
    ppLabel13: TppLabel;
    ppdLoja: TppDBText;
    ppLabel3: TppLabel;
    ppLabel12: TppLabel;
    ppLabel14: TppLabel;
    ppLabel15: TppLabel;
    ppLabel16: TppLabel;
    ppLabel17: TppLabel;
    ppLabel18: TppLabel;
    ppLabel19: TppLabel;
    ppLabel8: TppLabel;
    ppLabel10: TppLabel;
    ppLabel11: TppLabel;
    prbRodape: TppGroupFooterBand;
    ppShape3: TppShape;
    mmoRodape: TppMemo;
    prlVlrAcumAno: TppDBText;
    pVlrOrcadoDia: TppDBText;
    ppLabel4: TppLabel;
    ppLabel5: TppLabel;
    ppDBText7: TppDBText;
    ppLabel6: TppLabel;
    ppLabel9: TppLabel;
    ppDBText2: TppDBText;
    ppLabel20: TppLabel;
    ppDBCalc1: TppDBCalc;
    ppLabel21: TppLabel;
    ppLabel22: TppLabel;
    ppLabel23: TppLabel;
    ppLabel24: TppLabel;
    ppDBText8: TppDBText;
    ppDBText9: TppDBText;
    ppDBText10: TppDBText;
    ppDBText11: TppDBText;
    daDataModule1: TdaDataModule;
    pplVda_Venda_Temp: TppDBPipeline;
    ppParameterList1: TppParameterList;
    procedure FormCreate(Sender: TObject);
    procedure btnImprimirClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure prbCabecalhoBeforePrint(Sender: TObject);
    procedure prbDetalheBeforePrint(Sender: TObject);
    procedure CarregaParametros;
    procedure LimpaPdf;
    procedure CarregaParamsBanco;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmRel_Venda_dia_Email: TfrmRel_Venda_dia_Email;
  dDataIni, dDataFin       : TDateTime;
  iNumero : integer;
  sDataMax : string;
  iArqIni : tIniFile;
  sEmail,sAssunto,sEmailFrom,sUserName,sPassword,sNome,sCopia_oculta :STRING;
  sUsuario, sBanco, sSenha : String;
implementation

{$R *.dfm}

uses uFunc, ufuncoes;

procedure TfrmRel_Venda_dia_Email.btnImprimirClick(Sender: TObject);
var
   sMes,sAno,sParametros,sUsuario,sDia,sDt_Inicial,sDt_Final,sSQL,sCodEmp,
        sCaminhoArquivo,sNomeArquivo: String;
   Size: Cardinal;
   bEnvio: Boolean;
   iTentativas: Integer;
begin
     sCaminhoArquivo := 'c:\Rel_Venda_Dia_Email\';
     sMes  := copy(DateToStr(Date-1),4,2);
     sAno  := copy(DateToStr(Date-1),7,4);

     sSQL := '';
     sSQL := 'select * from vda_venda_ano '+
             ' where cod_unidade > 9000 '+
             ' and ano >= '+sAno+' - 2 '+
             ' and mes = '+sMes+
             ' order by decode(cod_emp,999,0,cod_emp), decode(cod_unidade,9999,0,cod_unidade), ano, dta_movimento ';

     sDia := '01';
     sDt_Inicial  := PadLeft(sDia+'/'+sMes+'/'+sAno,8,'0');
     sDt_Final  := PadLeft(sDia+'/'+sMes+'/'+sAno,8,'0');
     prlMes.Caption := 'Mês/Ano - '+sMes+'/'+sAno;
     prlEmissao.Caption := 'Emissão - '+DateToStr(Date());

     if qryRelVenda.Active then
        qryRelVenda.Active := false;
     qryRelVenda.SQL.Clear;
     qryRelVenda.SQL.Add(sSQL);

     if not qryRelVenda.Active then
        qryRelVenda.open;

     sNomeArquivo := 'VendasPorDia_'+Elimina_Caracteres(DateToStr(date),'/','')+'.pdf';
     pprVda_Venda_Temp.AllowPrintToFile := True;
     pprVda_Venda_Temp.DeviceType := 'PDF';
     pprVda_Venda_Temp.ShowPrintDialog := False;
     pprVda_Venda_Temp.TextFileName := sCaminhoArquivo+sNomeArquivo;
     pprVda_Venda_Temp.Print;

     iTentativas := 0;
     repeat
           bEnvio := True;
           Inc(iTentativas);
           try
              ACBrMail1.Clear;
              ACBrMail1.ClearAttachments;
              ACBrMail1.SMTP.Reset;

              ACBrMail1.From := sEmailFrom;
              ACBrMail1.FromName := sNome;
              ACBrMail1.Host := 'smtp.office365.com';
              ACBrMail1.Username := sUserName;
              ACBrMail1.Password := sPassword;
              ACBrMail1.Port := '587';
              ACBrMail1.AddAddress(sEmail,'');
              ACBrMail1.AddBCC(sCopia_oculta);
              ACBrMail1.Subject := sAssunto;
              ACBrMail1.IsHTML := True;
              ACBrMail1.Body.Text :=  '';
              AcbrMail1.SetTLS := True;
              ACBrMail1.AddAttachment(sCaminhoArquivo+sNomeArquivo);
              ACBrMail1.Send;
           except
                 bEnvio := False;
           end;
     until (bEnvio);
end;

procedure TfrmRel_Venda_dia_Email.FormCreate(Sender: TObject);
begin
   CarregaParamsBanco;
   try
     FDConnection1.Params.Database := sBanco;
     FDConnection1.Params.UserName := sUsuario;
     FDConnection1.Params.Password := sSenha;
     FDConnection1.Connected := True;
   except
       on E:EDatabaseError do
            begin
                 MessageDlg('Falha ao conectar o banco '+#13+
                            'a aplicação vai fechar!'+#13+
                            E.Message,mtInformation,[mbOk], 0);
                Application.Terminate;
            end;
   end;
    qryDta.Close;
    qryDta.Open;

    if qryDta.RecordCount > 0 then
       sDataMax := qryDta.FieldByName('dta_movimento').AsString
    else
       sDataMax := DateToStr(date - 1);
    CarregaParametros;
    btnImprimirClick(Sender);
end;

procedure TfrmRel_Venda_dia_Email.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
    case key of
          VK_RETURN : Perform(WM_NEXTDLGCTL,0,0);
     end;
end;

procedure TfrmRel_Venda_dia_Email.prbCabecalhoBeforePrint(Sender: TObject);
begin
    if StrToFloatDef(ppdLoja.Text,0) > 9000 then
       ppdLoja.Visible := False
    else
       ppdLoja.Visible := true;

end;

procedure TfrmRel_Venda_dia_Email.prbDetalheBeforePrint(Sender: TObject);
begin
      if StrToFloatDef(fretiraPonto(ppDBText5.Text),0) = 0 then
    begin
        ppDBText5.Visible := False;
        ppDBText6.Visible := False;
    end else
    begin
        ppDBText5.Visible := True;
        ppDBText6.Visible := True;
    end;

    if (Trim(ppDBText1.Text) = 'Domingo') or (Trim(ppDBText1.Text) = 'Dom') then
    begin
       ppMemo1.Color := clSilver;
       ppMemo1.Visible := True;
       //ppMargem.Visible := False;
       ppMargem.Left := 2.8400;;
    end else
    begin
       ppMemo1.Visible := false;
       //ppMargem.Visible := True;
       ppMargem.Left := 2.3437;

    end;

    if (Trim(ppdDiaImpresso.Text) = 'FF') and (not(Trim(ppDBText1.Text) = 'Domingo') and not(Trim(ppDBText1.Text) = 'Dom')) then
    begin
        ppMemo1.Color := clBtnFace;
        ppMemo1.Visible := True;
        ppdPerMeta.Visible := False;
        ppdDiaImpresso.Visible := True;
    end else
    begin
        ppdPerMeta.Visible := True;
        ppdDiaImpresso.Visible := False;
    end;

    if StrToDate(ppdDtaMovimento.Text) > StrToDate(sDataMax) then
    begin
        ppdVlrAcum.Visible := False;
        ppdPerAcum.Visible := False;
        ppMargem.Visible := False;
        ppDBText3.Visible := False;
    end
    else
    begin
        ppdVlrAcum.Visible := True;
        ppdPerAcum.Visible := True;
        ppMargem.Visible := True;
        ppDBText3.Visible := True;
    end;
end;

procedure TfrmRel_Venda_dia_Email.CarregaParametros;
var
   sDiretorio: string;
begin
     try
        //sDiretorio := GetCurrentDir;
        sDiretorio :='C:\Rel_Venda_Dia_Email';
        iArqIni := TIniFile.Create(sDiretorio+'\config.ini');
        sEmail := iArqIni.ReadString('EMAIL','EMAIL','');
        sAssunto := iArqIni.ReadString('EMAIL FROM','Assunto','');
        sEmailFrom := iArqIni.ReadString('EMAIL FROM','Endereco','');
        sUserName := iArqIni.ReadString('EMAIL FROM','UserName','');
        sPassword := iArqIni.ReadString('EMAIL FROM','Password','');
        sNome := iArqIni.ReadString('EMAIL FROM','Nome','');
        sCopia_oculta :=  iArqIni.ReadString('EMAIL FROM','copia_oculta','');
        iArqINI.Free;
     except
           ShowMessage('Erro: Não carregou arquivo de configuração.'+chr(13)+
                       'Verifique!!!!'+chr(13)+
                       sDiretorio+'\config.ini');
           Application.Terminate;
           Exit;
     end;

     LimpaPdf;
end;

procedure TfrmRel_Venda_dia_Email.CarregaParamsBanco;
var TomEncryption1: TTomEncryption;
begin
    TomEncryption1 := TTomEncryption.Create(Self);
    CarregaSenhasBancoOra('GRZPNL_BERLIN',TomEncryption1,sUsuario,sSenha,sBanco);
end;

procedure TfrmRel_Venda_dia_Email.LimpaPdf;
Var
    sArq : string;
    datacriacao: TDateTime;
    SR: TSearchRec;
   Ret: Integer;
  TempNome: string;


    function FileTimeToDTime(FTime: TFileTime): TDateTime;
    var
       LocalFTime: TFileTime;
       STime: TSystemTime;
    begin
        FileTimeToLocalFileTime(FTime, LocalFTime);
        FileTimeToSystemTime(LocalFTime, STime);
        Result := SystemTimeToDateTime(STime);
    end;
Begin

      sArq := 'C:\Rel_Venda_Dia_Email\*.pdf';
     ret :=  FindFirst(sArq, faAnyFile, SR);

   try
    while Ret = 0 do
    begin
        datacriacao := FileTimeToDTime(SR.FindData.ftCreationTime);

         if Trunc(datacriacao) < Trunc(Date-7)  then
            DeleteFile(pChar('C:\Rel_Venda_Dia_Email\'+SR.Name));
     { if TemAtributo(SR.Attr, faDirectory) then
      begin
        if (SR.Name <> '.') And (SR.Name <> '..') then
          if Sub = True then
          begin
            TempNome := Diretorio+'\' + SR.Name;
            ListarArquivos(TempNome, True);
          end;
      end
      else
      begin
        memLista.Lines.Add(Diretorio+'\'+SR.Name);
      end;      }
        Ret := FindNext(SR);
    end;
  finally
    begin
        FindClose(sr);
    end;
  end;

end;



end.
